#!/bin/sh

# ENV
exec > /root/firs-setup.log 2>&1

msg() {
    local DATE=$(date '+%d %B %Y %T')
    echo "[ INFO FIRST SETUP ] $1"
    logger -p "notice" "[ INFO FIRST SETUP ] $1"
}

# dont remove!
msg "Installed Time: $(date '+%A, %d %B %Y %T')"
msg "###############################################"
msg "Processor: $(ubus call system board | grep '\"system\"' | sed 's/ \+/ /g' | awk -F'\"' '{print $4}')"
msg "Device Model: $(ubus call system board | grep '\"model\"' | sed 's/ \+/ /g' | awk -F'\"' '{print $4}')"
msg "Device Board: $(ubus call system board | grep '\"board_name\"' | sed 's/ \+/ /g' | awk -F'\"' '{print $4}')"
sed -i "s#_('Firmware Version'),(L.isObject(boardinfo.release)?boardinfo.release.description+' / ':'')+(luciversion||''),#_('Firmware Version'),(L.isObject(boardinfo.release)?boardinfo.release.description+' ⚝ 𝚇𝚒𝚍𝚣⁴⁰⁴ [ Ouc3kNF6 ]':''),#g" /www/luci-static/resources/view/status/include/10_system.js
sed -i -E "s|icons/port_%s.png|icons/port_%s.gif|g" /www/luci-static/resources/view/status/include/29_ports.js
sed -i 's/\[ -f \/etc\/banner \] && cat \/etc\/banner/#&/' /etc/profile
sed -i 's/\[ -n "$FAILSAFE" \] && cat \/etc\/banner.failsafe/& || \/usr\/bin\/xidz/' /etc/profile
if grep -q "ImmortalWrt" /etc/openwrt_release; then
  sed -i "s/\(DISTRIB_DESCRIPTION='ImmortalWrt [0-9]*\.[0-9]*\.[0-9]*\).*'/\1'/g" /etc/openwrt_release
  sed -i -E "s|services/ttyd|system/ttyd|g" /usr/share/ucode/luci/template/themes/material/header.ut
  msg Branch version: "$(grep 'DISTRIB_DESCRIPTION=' /etc/openwrt_release | awk -F"'" '{print $2}')"
elif grep -q "OpenWrt" /etc/openwrt_release; then
  sed -i "s/\(DISTRIB_DESCRIPTION='OpenWrt [0-9]*\.[0-9]*\.[0-9]*\).*'/\1'/g" /etc/openwrt_release
  msg Branch version: "$(grep 'DISTRIB_DESCRIPTION=' /etc/openwrt_release | awk -F"'" '{print $2}')"
fi
msg "###############################################"

# Set hostname and Timezone to Asia/Jakarta
msg "Setup NTP Server and Time Zone to Asia/Jakarta"
uci set system.@system[0].hostname='Xidz'
uci set system.@system[0].timezone='WIB-7'
uci set system.@system[0].zonename='Asia/Jakarta'
uci -q delete system.ntp.server
uci add_list system.ntp.server="pool.ntp.org"
uci add_list system.ntp.server="id.pool.ntp.org"
uci add_list system.ntp.server="time.google.com"
uci commit system

# configure wan interface
msg "Setup WAN and LAN Interface"
uci set network.lan.ipaddr="192.168.1.1"
uci set network.lan.delegate='0'
uci set network.wan=interface
uci set network.wan.proto='dhcp'
uci set network.wan.device='eth1'
uci set network.modemmanager=interface 
uci set network.modemmanager.proto='modemmanager'
uci set network.modemmanager.device='/sys/devices/platform/scb/fd500000.pcie/pci0000:00/0000:00:00.0/0000:01:00.0/usb2/2-1'
uci set network.modemmanager.apn='internet'
uci set network.modemmanager.auth='none'
uci set network.modemmanager.iptype='ipv4'
uci set network.modemmanager.force_connection='1'
uci set network.tethering=interface
uci set network.tethering.proto='dhcp'
uci set network.tethering.device='usb0'
uci -q delete network.wan6
uci commit network
uci set firewall.@zone[1].network='wan modemmanager tethering'
uci commit firewall

# configure ipv6
uci -q delete dhcp.lan.dhcpv6
uci -q delete dhcp.lan.ra
uci -q delete dhcp.lan.ndp
uci -q delete dhcp.lan.ra_slaac
uci -q delete dhcp.lan.ra_flags
uci -q delete dhcp.lan.max_preferred_lifetime
uci -q delete dhcp.lan.max_valid_lifetime
uci commit dhcp
uci set network.lan.delegate='0'
uci del network.lan.ip6assign
uci commit network

# configure WLAN
msg "Setup Wireless if available"
uci set wireless.@wifi-device[0].disabled='0'
uci set wireless.@wifi-iface[0].disabled='0'
uci set wireless.@wifi-iface[0].encryption='none'
uci set wireless.@wifi-device[0].country='ID'
if grep -q "Raspberry Pi 4\|Raspberry Pi 3" /proc/cpuinfo; then
  uci set wireless.@wifi-iface[0].ssid='xidz_5g'
  uci set wireless.@wifi-device[0].channel='149'
  uci set wireless.radio0.htmode='HT40'
  uci set wireless.radio0.band='5g'
else
  uci set wireless.@wifi-iface[0].ssid='xidz'
  uci set wireless.@wifi-device[0].channel='1'
  uci set wireless.@wifi-device[0].band='2g'
fi
uci commit wireless
wifi reload && wifi up
if iw dev | grep -q Interface; then
  if grep -q "Raspberry Pi 4\|Raspberry Pi 3" /proc/cpuinfo; then
    if ! grep -q "wifi up" /etc/rc.local; then
      sed -i '/exit 0/i # remove if you dont use wireless' /etc/rc.local
      sed -i '/exit 0/i sleep 10 && wifi up' /etc/rc.local
    fi
    if ! grep -q "wifi up" /etc/crontabs/root; then
      echo "# remove if you dont use wireless" >> /etc/crontabs/root
      echo "0 */12 * * * wifi down && sleep 5 && wifi up" >> /etc/crontabs/root
      service cron restart
    fi
  fi
else
  msg "No wireless device detected."
fi

# Step 1: Configure Password Login OpenWrt
msg "Step 1: Configure Password Login OpenWrt"
(echo "xidz"; sleep 1; echo "xidz") | passwd > /dev/null


# Step 2: Add Custom Repo and Disable opkg signature check
msg "Step 2: Add Custom Repo and Disable opkg signature check"
sed -i 's/option check_signature/# option check_signature/g' /etc/opkg.conf
#echo "src/gz custom_arch https://dl.openwrt.ai/packages-$(grep "VERSION" /etc/os-release | head -n 1 | awk -F '"' '{print $2}' | cut -d. -f1,2)/packages/$(grep "OPENWRT_ARCH" /etc/os-release | awk -F '"' '{print $2}')/kiddin9" >> /etc/opkg/customfeeds.conf


# Step 3: Remove sysinfo banner if Devices Amlogic
msg "Step 3: Remove sysinfo banner if Devices Amlogic"
if opkg list-installed | grep -q "^luci-app-amlogic "; then
    rm -rf /etc/profile.d/30-sysinfo.sh
fi


# Step 3: Remove login password required when accessing terminal
msg "Step 3: Remove login password required when accessing terminal"
uci set ttyd.@ttyd[0].command='/bin/bash --login'
uci commit ttyd


# Step 4: Remove huawei me909s usb-modeswitch
msg "Step 4: Remove huawei me909s usb-modeswitch"
sed -i -e '/12d1:15c1/,+5d' /etc/usb-mode.json


# Step 5: Remove dw5821e usb-modeswitch
msg "Step 5: Remove dw5821e usb-modeswitch"
sed -i -e '/413c:81d7/,+5d' /etc/usb-mode.json


# Step 6: Disable /etc/config/xmm-modem
msg "Step 6: Disable /etc/config/xmm-modem"
uci set xmm-modem.@xmm-modem[0].enable='0'
uci commit xmm-modem


# Step 8: Setup Auto Vnstat Database Backup
msg "Step 8: Setup Auto Vnstat Database Backup"
sed -i 's/;DatabaseDir "\/var\/lib\/vnstat"/DatabaseDir "\/etc\/vnstat"/' /etc/vnstat.conf
mkdir -p /etc/vnstat
chmod +x /etc/init.d/vnstat_backup
bash /etc/init.d/vnstat_backup enable


# Step 10: Configurating OpenClash
msg "Step 10: Configurating OpenClash"
bash /usr/bin/patchoc.sh
sed -i '/exit 0/i #/usr/bin/patchoc.sh' /etc/rc.local
ln -s /etc/openclash/history/config-wrt.db /etc/openclash/cache.db
ln -s /etc/openclash/core/clash_meta  /etc/openclash/clash


# Step 11: Adding New Line For Enable i2c Oled Display if Devices Supported
msg "Step 11: Adding New Line For Enable i2c Oled Display if Devices Supported"
if grep -q "Raspberry Pi 4\|Raspberry Pi 3" /proc/cpuinfo; then
    echo -e "\ndtparam=i2c1=on\ndtparam=spi=on\ndtparam=i2s=on" >> /boot/config.txt
fi


# Step 12: Setup PHP
msg "Step 12: Setup PHP"
msg "system not using php-cgi, patching php config ..."
uci set uhttpd.main.ubus_prefix='/ubus'
uci set uhttpd.main.interpreter='.php=/usr/bin/php-cgi'
uci set uhttpd.main.index_page='cgi-bin/luci'
uci add_list uhttpd.main.index_page='index.html'
uci add_list uhttpd.main.index_page='index.php'
uci commit uhttpd
sed -i -E "s|memory_limit = [0-9]+M|memory_limit = 100M|g" /etc/php.ini
sed -i -E "s|display_errors = On|display_errors = Off|g" /etc/php.ini
ln -s /usr/bin/php-cli /usr/bin/php
[ -d /usr/lib/php8 ] && [ ! -d /usr/lib/php ] && ln -sf /usr/lib/php8 /usr/lib/php
msg "patching system with php configuration done ..."
msg "restarting uhttpd ..."
/etc/init.d/uhttpd restart


# Step 13: Setting Tinyfm
msg "Step 13: Setting Tinyfm"
ln -s / /www/tinyfm/rootfs

# Step 14 Default Theme "
msg "Setup Default Theme"
uci set luci.main.mediaurlbase='/luci-static/alpha' && uci commit

# Step 14: Patch OpenClash
msg "Step 14: Patch OpenClash"
STATUS="/usr/lib/lua/luci/view/openclash/status.htm"
DEV="/usr/lib/lua/luci/view/openclash/developer.htm"
MYIP="/usr/lib/lua/luci/view/openclash/myip.htm"
IMG="/luci-static/resources/openclash/img"
CLIENT="/usr/lib/lua/luci/model/cbi/openclash/client.lua"
CONT="/usr/lib/lua/luci/controller/openclash.lua"

[ -f "/www/${IMG}/logo.png" ] && sed -i "s#https://ftp.jaist.ac.jp/pub/sourceforge.jp/storage/g/o/op/openclash/<%=RELEASE_BRANCH%>/img/logo.png#$IMG/logo.png#g" $STATUS
[ -f "/www/${IMG}/meta.png" ] && sed -i "s#https://ftp.jaist.ac.jp/pub/sourceforge.jp/storage/g/o/op/openclash/<%=RELEASE_BRANCH%>/img/meta.png#$IMG/meta.png#g" $STATUS
[ -f "/www/${IMG}/Wiki.svg" ] && sed -i "s#https://img.shields.io/badge/Wiki--lightgrey?logo=GitBook&style=social#$IMG/Wiki.svg#g" $STATUS
[ -f "/www/${IMG}/Tutorials.svg" ] && sed -i "s#https://img.shields.io/badge/Tutorials--lightgrey?logo=Wikipedia&style=social#$IMG/Tutorials.svg#g" $STATUS
[ -f "/www/${IMG}/Star.svg" ] && sed -i "s#https://img.shields.io/badge/Star--lightgrey?logo=github&style=social#$IMG/Star.svg#g" $STATUS
[ -f "/www/${IMG}/Telegram.svg" ] && sed -i "s#https://img.shields.io/badge/Telegram--lightgrey?logo=Telegram&style=social#$IMG/Telegram.svg#g" $STATUS
[ -f "/www/${IMG}/Sponsor.svg" ] && sed -i "s#https://img.shields.io/badge/Sponsor--lightgrey?logo=ko-fi&style=social#$IMG/Sponsor.svg#g" $STATUS

if ! grep -qE "\-\- s:section|\-\-s:section" $CLIENT
then
	sed -i "s#s:section#-- s:section#g" $CLIENT
	mv $MYIP $MYIP.bak
	cat << 'EOF' > $MYIP
<!DOCTYPE html>
<html>
</html>
EOF
fi

if grep -q 'githubusercontent.com' $DEV
then
	sed -i 's#translate("Credits")#translate("")#g' $CLIENT
	mv $DEV $DEV.bak
	cat << 'EOF' > $DEV
<style>
.developer_ {
  text-align: justify;
  text-align-last: justify;
}
</style>
<fieldset class="cbi-section">
    <div class="developer_">
        <table width="100%"><tr><td>
        <span id="_Dreamacro"><%:Dreamacro%></span>
        <span id="_vernesong"><%:Vernesong%></span>
        <span id="_frainzy1477"><%:Frainzy1477%></span>
        <span id="_SukkaW"><%:SukkaW%></span>
        <span id="_lhie1_dev"><%:lhie1_dev%></span>
        <span id="_ConnersHua_dev"><%:ConnersHua_dev%></span>
        <span id="_haishanh"><%:Haishanh%></span>
        <span id="_MaxMind"><%:MaxMind%></span>
        <span id="_FQrabbit"><%:FQrabbit%></span>
        <span id="_Alecthw"><%:Alecthw%></span>
        <span id="_Tindy_X"><%:Tindy_X%></span>
        <span id="_lmc999"><%:lmc999%></span>
        <span id="_dlercloud"><%:Dlercloud%></span>
        <span id="_immortalwrt"><%:Immortalwrt%></span>
        <span id="_MetaCubeX"><%:MetaCubeX%></span>
        </td></tr></table>
    </div>
</fieldset>
EOF
fi

sed -i '87 i\	entry({"admin", "services", "openclash", "editor"}, template("openclash/editor"),_("Config Editor"), 90).leaf = true' $CONT
cat << EOF > /usr/lib/lua/luci/view/openclash/editor.htm
<%+header%>
<div class="cbi-map">
<iframe id="editor" style="width: 100%; min-height: 100vh; border: none; border-radius: 2px;"></iframe>
</div>
<script type="text/javascript">
document.getElementById("editor").src = "http://" + window.location.hostname + "/tinyfm/tinyfm.php?p=etc/openclash";
</script>
<%+footer%>
EOF


# Step 16: Set All permission files
msg "Step 16: Set All permission files"
check_permission() {
    local DIR=${1:-.}

    find "$DIR" -type f | while read file; do
        if file "$file" | grep -q "executable"; then
            if [ ! -x "$file" ]; then
                msg "File requiring chmod +x: $file"
                chmod +x "$file"
            fi
        fi
    done
}

check_permission "/etc/init.d"
check_permission "/etc/mihomo"
check_permission "/etc/openclash"
check_permission "/lib/netifd"
check_permission "/lib/wifi"
check_permission "/sbin"
check_permission "/usr/bin"


# Step 17: Run Another Process
msg "Step 17: Run Another Process"
bash /root/install2.sh


# Step 18: Set Openclash Config
msg "Step 18: Set Openclash Config"
if [ -f "/etc/config/openclash" ]; then
  rm -rf /etc/config/openclash
  mv /etc/config/openclash1 /etc/config/openclash
else
  msg "Openclash Config Not Found"
fi


# Log success
msg "First Setup settings successfully applied..."


# Remove this script after successful execution
rm -f /etc/uci-defaults/$(basename $0)